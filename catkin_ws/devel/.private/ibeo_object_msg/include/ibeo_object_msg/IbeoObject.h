// Generated by gencpp from file ibeo_object_msg/IbeoObject.msg
// DO NOT EDIT!


#ifndef IBEO_OBJECT_MSG_MESSAGE_IBEOOBJECT_H
#define IBEO_OBJECT_MSG_MESSAGE_IBEOOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/TwistWithCovariance.h>
#include <shape_msgs/SolidPrimitive.h>

namespace ibeo_object_msg
{
template <class ContainerAllocator>
struct IbeoObject_
{
  typedef IbeoObject_<ContainerAllocator> Type;

  IbeoObject_()
    : header()
    , object_id(0)
    , object_class(0)
    , object_class_uncertainty(0)
    , object_age(0.0)
    , object_class_age(0.0)
    , mobile(false)
    , motion_model_validated(false)
    , pose()
    , twist()
    , shape()  {
    }
  IbeoObject_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , object_id(0)
    , object_class(0)
    , object_class_uncertainty(0)
    , object_age(0.0)
    , object_class_age(0.0)
    , mobile(false)
    , motion_model_validated(false)
    , pose(_alloc)
    , twist(_alloc)
    , shape(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _object_id_type;
  _object_id_type object_id;

   typedef uint8_t _object_class_type;
  _object_class_type object_class;

   typedef uint16_t _object_class_uncertainty_type;
  _object_class_uncertainty_type object_class_uncertainty;

   typedef float _object_age_type;
  _object_age_type object_age;

   typedef float _object_class_age_type;
  _object_class_age_type object_class_age;

   typedef uint8_t _mobile_type;
  _mobile_type mobile;

   typedef uint8_t _motion_model_validated_type;
  _motion_model_validated_type motion_model_validated;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::TwistWithCovariance_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef  ::shape_msgs::SolidPrimitive_<ContainerAllocator>  _shape_type;
  _shape_type shape;





  typedef boost::shared_ptr< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> const> ConstPtr;

}; // struct IbeoObject_

typedef ::ibeo_object_msg::IbeoObject_<std::allocator<void> > IbeoObject;

typedef boost::shared_ptr< ::ibeo_object_msg::IbeoObject > IbeoObjectPtr;
typedef boost::shared_ptr< ::ibeo_object_msg::IbeoObject const> IbeoObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_object_msg::IbeoObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ibeo_object_msg::IbeoObject_<ContainerAllocator1> & lhs, const ::ibeo_object_msg::IbeoObject_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.object_id == rhs.object_id &&
    lhs.object_class == rhs.object_class &&
    lhs.object_class_uncertainty == rhs.object_class_uncertainty &&
    lhs.object_age == rhs.object_age &&
    lhs.object_class_age == rhs.object_class_age &&
    lhs.mobile == rhs.mobile &&
    lhs.motion_model_validated == rhs.motion_model_validated &&
    lhs.pose == rhs.pose &&
    lhs.twist == rhs.twist &&
    lhs.shape == rhs.shape;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ibeo_object_msg::IbeoObject_<ContainerAllocator1> & lhs, const ::ibeo_object_msg::IbeoObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ibeo_object_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "985d2c588d52776ee0b17d51f99bcf86";
  }

  static const char* value(const ::ibeo_object_msg::IbeoObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x985d2c588d52776eULL;
  static const uint64_t static_value2 = 0xe0b17d51f99bcf86ULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_object_msg/IbeoObject";
  }

  static const char* value(const ::ibeo_object_msg::IbeoObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32 object_id\n"
"uint8 object_class\n"
"uint16 object_class_uncertainty\n"
"float32 object_age\n"
"float32 object_class_age\n"
"bool mobile\n"
"bool motion_model_validated\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"shape_msgs/SolidPrimitive shape\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: shape_msgs/SolidPrimitive\n"
"# Define box, sphere, cylinder, cone \n"
"# All shapes are defined to have their bounding boxes centered around 0,0,0.\n"
"\n"
"uint8 BOX=1\n"
"uint8 SPHERE=2\n"
"uint8 CYLINDER=3\n"
"uint8 CONE=4\n"
"\n"
"# The type of the shape\n"
"uint8 type\n"
"\n"
"\n"
"# The dimensions of the shape\n"
"float64[] dimensions\n"
"\n"
"# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array\n"
"\n"
"# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding\n"
"# sides of the box.\n"
"uint8 BOX_X=0\n"
"uint8 BOX_Y=1\n"
"uint8 BOX_Z=2\n"
"\n"
"\n"
"# For the SPHERE type, only one component is used, and it gives the radius of\n"
"# the sphere.\n"
"uint8 SPHERE_RADIUS=0\n"
"\n"
"\n"
"# For the CYLINDER and CONE types, the center line is oriented along\n"
"# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component\n"
"# of dimensions gives the height of the cylinder (cone).  The\n"
"# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the\n"
"# radius of the base of the cylinder (cone).  Cone and cylinder\n"
"# primitives are defined to be circular. The tip of the cone is\n"
"# pointing up, along +Z axis.\n"
"\n"
"uint8 CYLINDER_HEIGHT=0\n"
"uint8 CYLINDER_RADIUS=1\n"
"\n"
"uint8 CONE_HEIGHT=0\n"
"uint8 CONE_RADIUS=1\n"
;
  }

  static const char* value(const ::ibeo_object_msg::IbeoObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.object_id);
      stream.next(m.object_class);
      stream.next(m.object_class_uncertainty);
      stream.next(m.object_age);
      stream.next(m.object_class_age);
      stream.next(m.mobile);
      stream.next(m.motion_model_validated);
      stream.next(m.pose);
      stream.next(m.twist);
      stream.next(m.shape);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IbeoObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_object_msg::IbeoObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_object_msg::IbeoObject_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "object_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.object_id);
    s << indent << "object_class: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.object_class);
    s << indent << "object_class_uncertainty: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.object_class_uncertainty);
    s << indent << "object_age: ";
    Printer<float>::stream(s, indent + "  ", v.object_age);
    s << indent << "object_class_age: ";
    Printer<float>::stream(s, indent + "  ", v.object_class_age);
    s << indent << "mobile: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mobile);
    s << indent << "motion_model_validated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion_model_validated);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "shape: ";
    s << std::endl;
    Printer< ::shape_msgs::SolidPrimitive_<ContainerAllocator> >::stream(s, indent + "  ", v.shape);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_OBJECT_MSG_MESSAGE_IBEOOBJECT_H
